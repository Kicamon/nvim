local colors = {
  bg0 = '#282828',
  bg1 = '#3c3836',
  bg2 = '#504945',
  bg3 = '#665c54',
  bg4 = '#7c6f64',
  fg0 = '#fbf1c7',
  fg1 = '#ebdbb2',
  fg2 = '#d5c4a1',
  fg3 = '#bdae93',
  fg4 = '#a89984',
  red = '#ff461f', -- 朱砂色
  dred = '#cc241d',
  green = '#b8bb26',
  dgreen = '#98971a',
  yellow = '#fabd2f',
  dyellow = '#d79921',
  lyellow = '#d8ff1f',
  blue = '#88abda',
  dblue = '#83a598',
  cyan = '#1fd8ff', -- 青蓝色
  dcyan = '#a59aca', -- 雪青色
  purple = '#d3869b',
  dpurple = '#b16286',
  aqua = '#8ec07c',
  daqua = '#689d6a',
  orange = '#f0945d',
  dorange = '#d65d0e',
  gray = '#928374',
  lgray = '#ebeee8',
  violet = '#a9a1e1', -- 紫罗兰
  magenta = '#c678dd', -- 品红色
}

local config = {
  undercurl = true,
  underline = true,
  bold = true,
  italic = {
    strings = true,
    comments = true,
    operators = false,
    folds = true,
  },
  strikethrough = true,
  invert_selection = false,
  invert_signs = false,
  invert_tabline = false,
  invert_intend_guides = false,
  inverse = true, -- invert background for search, diffs, statuslines and errors
  contrast = '', -- can be "hard", "soft" or empty string
  palette_overrides = {},
  overrides = {},
  dim_inactive = false,
  transparent_mode = false,
}

local function setcolor()
  local groups = {
    -- Base groups
    Normal = { fg = colors.fg1 },
    NormalFloat = { fg = colors.fg0, bg = 'NONE' },
    FloatWin = { fg = colors.fg0 },
    FloatBorder = { fg = colors.fg1 },
    NormalNC = { link = 'Normal' },
    CursorLine = { bg = colors.bg1 },
    CursorColumn = { link = 'CursorLine' },
    CursorWord = { underline = true },
    TabLineTop = { fg = colors.bg0, bg = colors.bg0, bold = config.bold },
    TabLineSel = { fg = colors.fg1, bg = colors.bg0, bold = config.bold },
    TabLine = { fg = colors.fg4, bg = colors.bg0, bold = config.bold },
    TabLineFill = { fg = 'NONE', bg = 'NONE' },
    MatchParen = { bg = colors.bg3, bold = config.bold },
    ColorColumn = { bg = colors.bg1 },
    Conceal = { fg = colors.dblue },
    CursorLineNr = { fg = colors.yellow },
    NonText = { fg = colors.bg2 },
    SpecialKey = { fg = colors.fg4 },
    Visual = { reverse = config.inverse },
    VisualNOS = { link = 'Visual' },
    Search = { fg = colors.yellow, bg = colors.bg0, reverse = config.inverse },
    IncSearch = { fg = colors.orange, bg = colors.bg0, reverse = config.inverse },
    CurSearch = { link = 'IncSearch' },
    QuickFixLine = { fg = colors.bg0, bg = colors.yellow, bold = config.bold },
    Underlined = { fg = colors.dblue, underline = config.underline },
    StatusLine = { fg = colors.bg0 },
    StatusLineNC = { fg = colors.bg0, reverse = config.inverse },
    WinBar = { fg = colors.fg4, bg = colors.bg0 },
    WinBarNC = { fg = colors.fg3, bg = colors.bg0 },
    WinSeparator = { fg = colors.bg3, bg = colors.bg0 },
    WildMenu = { fg = colors.dblue, bg = colors.bg2, bold = config.bold },
    Directory = { fg = colors.dblue, bold = config.bold },
    Title = { fg = colors.green, bold = config.bold },
    ErrorMsg = { fg = colors.bg0, bg = colors.red, bold = config.bold },
    MoreMsg = { fg = colors.yellow, bold = config.bold },
    ModeMsg = { fg = colors.yellow, bold = config.bold },
    Question = { fg = colors.orange, bold = config.bold },
    WarningMsg = { fg = colors.red, bold = config.bold },
    LineNr = { fg = colors.bg4 },
    SignColumn = { bg = colors.bg0 },
    Folded = { fg = colors.gray, bg = colors.bg1, italic = config.italic.folds },
    FoldColumn = { fg = colors.gray, bg = colors.bg1 },
    Cursor = { reverse = config.inverse },
    vCursor = { link = 'Cursor' },
    iCursor = { link = 'Cursor' },
    lCursor = { link = 'Cursor' },
    Special = { fg = colors.orange },
    Comment = { fg = colors.gray, italic = config.italic.comments },
    -- Todo         anything that needs extra attention; mostly the
    --              keywords TODO FIXME and XXX
    Todo = {
      fg = colors.bg0,
      bg = colors.yellow,
      bold = config.bold,
      italic = config.italic.comments,
    },
    Note = {
      fg = colors.bg0,
      bg = colors.blue,
      bold = config.bold,
      italic = config.italic.comments,
    },
    Done = { fg = colors.orange, bold = config.bold, italic = config.italic.comments },
    Error = { fg = colors.red, bold = config.bold, reverse = config.inverse },
    Statement = { fg = colors.red },
    Conditional = { fg = colors.red },
    Repeat = { fg = colors.red },
    Label = { fg = colors.red },
    Exception = { fg = colors.red },
    Operator = { fg = colors.orange, italic = config.italic.operators },
    Keyword = { fg = colors.red },
    Identifier = { fg = colors.dblue },
    Function = { fg = colors.green, bold = config.bold },
    PreProc = { fg = colors.aqua },
    Include = { fg = colors.aqua },
    Define = { fg = colors.aqua },
    Macro = { fg = colors.aqua },
    PreCondit = { fg = colors.aqua },
    Constant = { fg = colors.purple },
    Character = { fg = colors.purple },
    String = { fg = colors.green, italic = config.italic.strings },
    Boolean = { fg = colors.purple },
    Number = { fg = colors.purple },
    Float = { fg = colors.purple },
    Type = { fg = colors.yellow },
    StorageClass = { fg = colors.orange },
    Structure = { fg = colors.aqua },
    Typedef = { fg = colors.yellow },
    DiffDelete = { fg = colors.red, bg = colors.bg0, reverse = config.inverse },
    DiffAdd = { fg = colors.green, bg = colors.bg0, reverse = config.inverse },
    DiffChange = { fg = colors.aqua, bg = colors.bg0, reverse = config.inverse },
    DiffText = { fg = colors.yellow, bg = colors.bg0, reverse = config.inverse },
    SpellCap = { undercurl = config.undercurl, sp = colors.dblue },
    SpellBad = { undercurl = config.undercurl, sp = colors.red },
    SpellLocal = { undercurl = config.undercurl, sp = colors.aqua },
    SpellRare = { undercurl = config.undercurl, sp = colors.purple },
    Whitespace = { fg = colors.bg2 },
    Delimiter = { fg = colors.orange },
    -- LSP Diagnostic
    DiagnosticError = { fg = colors.red },
    DiagnosticSignError = { fg = colors.red, reverse = config.invert_signs },
    DiagnosticUnderlineError = { undercurl = config.undercurl, sp = colors.red },
    DiagnosticWarn = { fg = colors.yellow },
    DiagnosticSignWarn = { fg = colors.yellow, reverse = config.invert_signs },
    DiagnosticUnderlineWarn = { undercurl = config.undercurl, sp = colors.yellow },
    DiagnosticInfo = { fg = colors.dblue },
    DiagnosticSignInfo = { fg = colors.blue, reverse = config.invert_signs },
    DiagnosticUnderlineInfo = { undercurl = config.undercurl, sp = colors.dblue },
    DiagnosticHint = { fg = colors.aqua },
    DiagnosticSignHint = { fg = colors.aqua, reverse = config.invert_signs },
    DiagnosticUnderlineHint = { undercurl = config.undercurl, sp = colors.aqua },
    DiagnosticFloatingError = { fg = colors.red },
    DiagnosticFloatingWarn = { fg = colors.orange },
    DiagnosticFloatingInfo = { fg = colors.dblue },
    DiagnosticFloatingHint = { fg = colors.aqua },
    DiagnosticVirtualTextError = { fg = colors.red },
    DiagnosticVirtualTextWarn = { fg = colors.yellow },
    DiagnosticVirtualTextInfo = { fg = colors.dblue },
    DiagnosticVirtualTextHint = { fg = colors.aqua },
    LspReferenceRead = { fg = colors.yellow, bold = config.bold },
    LspReferenceText = { fg = colors.yellow, bold = config.bold },
    LspReferenceWrite = { fg = colors.orange, bold = config.bold },
    LspCodeLens = { fg = colors.gray },
    LspSignatureActiveParameter = { link = 'Search' },
    -- gitcommit
    gitcommitSelectedFile = { fg = colors.green },
    gitcommitDiscardedFile = { fg = colors.red },
    -- gitsigns.nvim
    GitSignsAdd = { fg = colors.green, reverse = config.invert_signs },
    GitSignsChange = { fg = colors.magenta, reverse = config.invert_signs },
    GitSignsDelete = { fg = colors.red, reverse = config.invert_signs },
    GitSignsAddLn = { fg = colors.green, reverse = config.invert_signs },
    GitSignsChangeLn = { fg = colors.magenta, reverse = config.invert_signs },
    GitSignsDeleteLn = { fg = colors.red, reverse = config.invert_signs },
    -- fzf-lua
    FzfLuaNormal = { fg = colors.fg1 },
    -- diff
    diffAdded = { fg = colors.green },
    diffRemoved = { fg = colors.red },
    diffChanged = { fg = colors.aqua },
    diffFile = { fg = colors.orange },
    diffNewFile = { fg = colors.yellow },
    diffOldFile = { fg = colors.orange },
    diffLine = { fg = colors.dblue },
    diffIndexLine = { link = 'diffChanged' },
    -- lspsaga.nvim
    LspSagaCodeActionTitle = { link = 'Title' },
    LspSagaCodeActionBorder = { fg = colors.fg1 },
    LspSagaCodeActionContent = { fg = colors.green, bold = config.bold },
    LspSagaLspFinderBorder = { fg = colors.fg1 },
    LspSagaAutoPreview = { fg = colors.orange },
    TargetWord = { fg = colors.dblue, bold = config.bold },
    FinderSeparator = { fg = colors.aqua },
    LspSagaDefPreviewBorder = { fg = colors.dblue },
    LspSagaHoverBorder = { fg = colors.orange },
    LspSagaRenameBorder = { fg = colors.dblue },
    LspSagaDiagnosticSource = { fg = colors.orange },
    LspSagaDiagnosticBorder = { fg = colors.purple },
    LspSagaDiagnosticHeader = { fg = colors.green },
    LspSagaSignatureHelpBorder = { fg = colors.green },
    SagaShadow = { fg = colors.bg0 },
    -- Indent
    IndentLine = { fg = colors.bg2 },
    IndentLineCurrent = { link = 'Comment' },
    -- StatusLine
    StatusLineMode = { fg = colors.fg2 },
    StatusLineFileInfo = { fg = colors.fg2 },
    StatusLineReadOnly = { fg = colors.red },
    StatusLineBranch = { fg = colors.violet },
    StatusLineLsp = { fg = colors.fg4 },
    StatusLineEncoding = { fg = colors.fg4 },
    StatlsLineLnum = { fg = colors.fg2 },
    -- pmenu
    Pmenu = { fg = colors.fg1, bg = colors.bg2 },
    PmenuSel = { fg = colors.bg2, bg = colors.blue },
    PmenuSbar = { bg = colors.bg2 },
    PmenuThumb = { bg = colors.bg4 },
    PmenuKind = { fg = colors.violet, bg = colors.bg2 },
    PmenuKindSel = { fg = colors.bg2, bg = colors.dblue, bold = config.bold },
    PmenuExtra = { fg = colors.fg1, bg = colors.bg2 },
    PmenuExtraSel = { fg = colors.bg2, bg = colors.dblue, bold = config.bold },
    -- cmp
    CmpWin = { fg = '#C5CDD9' },
    CmpWinSec = { fg = '#C5CDD9' },
    CmpWinBor = { fg = '#C5CDD9' },
    CmpItemAbbrDeprecated = { fg = '#7E8294', strikethrough = true },
    CmpItemAbbrMatch = { fg = '#82AAFF', bold = true },
    CmpItemAbbrMatchFuzzy = { fg = '#82AAFF', bold = true },
    CmpItemMenu = { fg = '#C792EA', italic = true },
    CmpItemKindField = { fg = '#C5CDD9' },
    CmpItemKindProperty = { fg = '#C5CDD9' },
    CmpItemKindEvent = { fg = '#C5CDD9' },
    CmpItemKindText = { fg = '#C5CDD9' },
    CmpItemKindEnum = { fg = '#C5CDD9' },
    CmpItemKindKeyword = { fg = '#C5CDD9' },
    CmpItemKindConstant = { fg = '#C5CDD9' },
    CmpItemKindConstructor = { fg = '#C5CDD9' },
    CmpItemKindReference = { fg = '#C5CDD9' },
    CmpItemKindFunction = { fg = '#C5CDD9' },
    CmpItemKindStruct = { fg = '#C5CDD9' },
    CmpItemKindClass = { fg = '#C5CDD9' },
    CmpItemKindModule = { fg = '#C5CDD9' },
    CmpItemKindOperator = { fg = '#C5CDD9' },
    CmpItemKindVariable = { fg = '#C5CDD9' },
    CmpItemKindFile = { fg = '#C5CDD9' },
    CmpItemKindUnit = { fg = '#C5CDD9' },
    CmpItemKindSnippet = { fg = '#C5CDD9' },
    CmpItemKindFolder = { fg = '#C5CDD9' },
    CmpItemKindMethod = { fg = '#C5CDD9' },
    CmpItemKindValue = { fg = '#C5CDD9' },
    CmpItemKindEnumMember = { fg = '#C5CDD9' },
    CmpItemKindInterface = { fg = '#C5CDD9' },
    CmpItemKindColor = { fg = '#C5CDD9' },
    CmpItemKindTypeParameter = { fg = '#C5CDD9' },

    -- nvim-treesitter
    ['@comment'] = { link = 'Comment' },
    ['@comment.note'] = { link = 'Note' },
    ['@comment.todo'] = { link = 'Todo' },
    ['@none'] = { bg = 'NONE', fg = 'NONE' },
    ['@preproc'] = { link = 'PreProc' },
    ['@define'] = { link = 'Define' },
    ['@operator'] = { link = 'Operator' },
    ['@punctuation.delimiter'] = { link = 'Delimiter' },
    ['@punctuation.bracket'] = { link = 'Delimiter' },
    ['@punctuation.special'] = { link = 'Delimiter' },
    ['@string'] = { link = 'String' },
    ['@string.regex'] = { link = 'String' },
    ['@string.escape'] = { link = 'SpecialChar' },
    ['@string.special'] = { link = 'SpecialChar' },
    ['@character'] = { link = 'Character' },
    ['@character.special'] = { link = 'SpecialChar' },
    ['@boolean'] = { link = 'Boolean' },
    ['@number'] = { link = 'Number' },
    ['@float'] = { link = 'Float' },
    ['@function'] = { link = 'Function' },
    ['@function.builtin'] = { link = 'Special' },
    ['@function.call'] = { link = 'Function' },
    ['@function.macro'] = { link = 'Macro' },
    ['@method'] = { link = 'Function' },
    ['@method.call'] = { link = 'Function' },
    ['@constructor'] = { link = 'Special' },
    ['@parameter'] = { link = 'Identifier' },
    ['@keyword'] = { link = 'Keyword' },
    ['@keyword.conditional'] = { link = 'Conditional' },
    ['@keyword.debug'] = { link = 'Debug' },
    ['@keyword.directive'] = { link = 'PreProc' },
    ['@keyword.directive.define'] = { link = 'Define' },
    ['@keyword.exception'] = { link = 'Exception' },
    ['@keyword.function'] = { link = 'Keyword' },
    ['@keyword.import'] = { link = 'Include' },
    ['@keyword.operator'] = { fg = colors.red },
    ['@keyword.repeat'] = { link = 'Repeat' },
    ['@keyword.return'] = { link = 'Keyword' },
    ['@keyword.storage'] = { link = 'StorageClass' },
    ['@conditional'] = { link = 'Conditional' },
    ['@repeat'] = { link = 'Repeat' },
    ['@debug'] = { link = 'Debug' },
    ['@label'] = { link = 'Label' },
    ['@include'] = { link = 'Include' },
    ['@exception'] = { link = 'Exception' },
    ['@type'] = { link = 'Type' },
    ['@type.builtin'] = { link = 'Type' },
    ['@type.definition'] = { link = 'Typedef' },
    ['@type.qualifier'] = { link = 'Type' },
    ['@storageclass'] = { link = 'StorageClass' },
    ['@attribute'] = { link = 'PreProc' },
    ['@field'] = { link = 'Identifier' },
    ['@property'] = { link = 'Identifier' },
    ['@variable'] = { fg = colors.fg1 },
    ['@variable.builtin'] = { link = 'Special' },
    ['@variable.member'] = { fg = colors.dblue },
    ['@constant'] = { link = 'Constant' },
    ['@constant.builtin'] = { link = 'Special' },
    ['@constant.macro'] = { link = 'Define' },
    ['@namespace'] = { fg = colors.fg1 },
    ['@symbol'] = { link = 'Identifier' },
    ['@text'] = { fg = colors.fg1 },
    ['@text.strong'] = { bold = config.bold },
    ['@text.emphasis'] = { italic = config.italic.strings },
    ['@text.underline'] = { underline = config.underline },
    ['@text.strike'] = { strikethrough = config.strikethrough },
    ['@text.title'] = { link = 'Title' },
    ['@text.literal'] = { link = 'String' },
    ['@text.uri'] = { link = 'Underlined' },
    ['@text.math'] = { link = 'Special' },
    ['@text.environment'] = { link = 'Macro' },
    ['@text.environment.name'] = { link = 'Type' },
    ['@text.reference'] = { link = 'Constant' },
    ['@text.note.comment'] = { fg = colors.red, bold = config.bold },
    ['@text.warning'] = { link = 'WarningMsg' },
    ['@text.danger'] = { link = 'ErrorMsg' },
    ['@text.danger.comment'] = { fg = colors.fg0, bg = colors.red, bold = config.bold },
    ['@text.diff.add'] = { link = 'diffAdded' },
    ['@text.diff.delete'] = { link = 'diffRemoved' },
    ['@tag'] = { link = 'Tag' },
    ['@tag.attribute'] = { link = 'Identifier' },
    ['@tag.delimiter'] = { link = 'Delimiter' },
    ['@punctuation'] = { link = 'Delimiter' },
    ['@macro'] = { link = 'Macro' },
    ['@structure'] = { link = 'Structure' },
    ['@lsp.type.class'] = { link = '@constructor' },
    ['@lsp.type.comment'] = {}, -- do not overwrite comments
    ['@lsp.type.decorator'] = { link = '@parameter' },
    ['@lsp.type.enum'] = { link = '@type' },
    ['@lsp.type.enumMember'] = { link = '@constant' },
    ['@lsp.type.function'] = { link = '@function' },
    ['@lsp.type.interface'] = { link = '@keyword' },
    ['@lsp.type.macro'] = { link = '@macro' },
    ['@lsp.type.method'] = { link = '@method' },
    ['@lsp.type.namespace'] = { link = '@namespace' },
    ['@lsp.type.parameter'] = { link = '@parameter' },
    ['@lsp.type.property'] = { link = '@property' },
    ['@lsp.type.struct'] = { link = '@constructor' },
    ['@lsp.type.type'] = { link = '@type' },
    ['@lsp.type.typeParameter'] = { link = '@type.definition' },
    ['@lsp.type.variable'] = { link = '@variable' },
  }

  for group, hl in pairs(config.overrides) do
    if groups[group] then
      groups[group].link = nil
    end

    groups[group] = vim.tbl_extend('force', groups[group] or {}, hl)
  end

  return groups
end

-- reset colors
vim.cmd.hi('clear')
vim.g.colors_name = 'gruvbox'

local groups = setcolor()

-- add highlights
for group, settings in pairs(groups) do
  vim.api.nvim_set_hl(0, group, settings)
end
