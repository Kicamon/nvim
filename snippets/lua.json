{
  "require": {
    "prefix": "req",
    "body": [
      "require(\"${1:module}\")"
    ],
    "description": "Require module"
  },
  "return": {
    "prefix": "rt",
    "body": [
      "return $0"
    ],
    "description": "return value"
  },
  "assigment": {
    "prefix": "ll",
    "body": [
      "local ${1:varName} = ${0:value}"
    ],
    "description": "create a variable"
  },
  "local": {
    "prefix": "l",
    "body": [
      "local ${0}"
    ],
    "description": "create a variable"
  },
  "locreq": {
    "prefix": "lreq",
    "body": [
      "local ${1:var} = require(\"${2:module}\")"
    ],
    "description": "Require module as a variable"
  },
  "class": {
    "prefix": "cl",
    "body": [
      "${1:className} = {}\n",
      "$1.${2:new} = function($3)",
      "\tlocal ${4:varName} = ${5:value}\n",
      "\t${6: --code}\n",
      "\treturn $4",
      "end"
    ],
    "description": "Create a class"
  },
  "if": {
    "prefix": "if",
    "body": [
      "if ${1:true} then",
      "\t$0",
      "end"
    ]
  },
  "elseif": {
    "prefix": "elseif",
    "body": [
      "elseif ${1:true} then",
      "\t$0"
    ]
  },
  "for": {
    "prefix": "for",
    "body": [
      "for ${1:i}=${2:1},${3:10} do",
      "\t$0",
      "end"
    ],
    "description": "for loop range"
  },
  "foreach": {
    "prefix": "foreach",
    "body": [
      "for i, ${1:x} in pairs(${2:table}) do",
      "\t$0",
      "end"
    ]
  },
  "forline": {
    "prefix": "forline",
    "body": [
      "f = io.open(${1:\"${2:filename}\"}, \"${3:r}\")\n",
      "while true do",
      "\tline = f:read()",
      "\tif line == nil then break end\n",
      "\t${0:-- code}",
      "end"
    ],
    "description": "read file line by line"
  },
  "function": {
    "prefix": "fu",
    "body": [
      "function ${1:name}($2)",
      "\t${0:-- code}",
      "end"
    ]
  },
  "inline-function": {
    "prefix": "f=",
    "body": [
      "local ${1:name} = function($2)",
      "\t${0:-- code}",
      "end"
    ]
  },
  "print": {
    "prefix": "p",
    "body": [
      "print(${0})"
    ]
  },
  "self": {
    "prefix": "self:",
    "body": [
      "function self:${1:methodName}($2)",
      "\t$0",
      "end"
    ]
  },
  "while": {
    "prefix": "while",
    "body": [
      "while ${1:true} do",
      "\t$0",
      "end"
    ]
  },
  "pcall": {
    "prefix": "pca",
    "body": [
      "pcall(${1:function})"
    ],
    "description": "Protect call a function"
  },
  "locpcall": {
    "prefix": "lpca",
    "body": [
      "local ${1:status}, ${2:err_or_value} = pcall(${3:function})"
    ],
    "description": "Protect call a function as a variable"
  },
  "callback": {
    "prefix": "callback",
    "body": [
      "callback = function(${0})",
      "\t${1:code}",
      "end"
    ],
    "description": "Callback for neovim config"
  },
  "config": {
    "prefix": "config",
    "body": [
      "config = function(${0})",
      "\t${1:code}",
      "end"
    ],
    "description": "Config for neovim config"
  },
  "comment": {
    "prefix": "---",
    "body": [
      "--- ${1:A one-line summary.}",
      "-- ${2:Description.}$0",
      "-- @param ${5:name} ${6:type} ${7:Parameter description.}",
      "-- @return ${3:type} ${4: Description of the returned object.}",
      "-- @usage ${8:Example about how to use it.}"
    ],
    "description": "A lua comment with short summary, description, parameters, return, and example."
  },
  "comment_simple": {
    "prefix": "--",
    "body": [
      "--- ${1:A one-line summary.}",
      "-- ${2:Description.}$0"
    ],
    "description": "A simple lua comment with short summary and description. Useful when you prefer to add the tags manually on functions."
  },
  "@author": {
    "prefix": "@author",
    "body": [
      "@author ${1:text.}$0"
    ],
    "description": "An author of the module or file."
  },
  "@copyright": {
    "prefix": "@copyright",
    "body": [
      "@copyright ${1:text.}$0"
    ],
    "description": "The copyright notice of the module or file. LuaDoc adds a Â© sign between the label (Copyright) and the given text (e.g. 2004-2007 Kepler Project)."
  },
  "@field": {
    "prefix": "@field",
    "body": [
      "@field ${1:description.}$0"
    ],
    "description": "Describe a table field definition."
  },
  "@param": {
    "prefix": "@param",
    "body": [
      "@param ${1:name} ${2:type} ${3:Parameter description.}$0"
    ],
    "description": "Describe function parameters. It requires the name of the parameter and its description."
  },
  "@release": {
    "prefix": "@release",
    "body": [
      "@release ${1:text}$0"
    ],
    "description": "Free format string to describe the module or file release."
  },
  "@return": {
    "prefix": "@return",
    "body": [
      "@return ${1:type} ${2:Description of the returned object.}$0"
    ],
    "description": "Describe a returning value of the function. Since Lua can return multiple values, this tag should appear more than once."
  },
  "@see": {
    "prefix": "@see",
    "body": [
      "@see ${1:name of a function or table}$0"
    ],
    "description": "Refers to other descriptions of functions or tables."
  },
  "@class": {
    "prefix": "@class",
    "body": [
      "@class ${1:name}$0"
    ],
    "description": "If LuaDoc cannot infer the type of documentation (function, table or module definition), the programmer can specify it explicitly."
  },
  "@description": {
    "prefix": "@description",
    "body": [
      "@description ${1:text}$0"
    ],
    "description": "The description of the function or table. This is usually infered automatically."
  },
  "@name": {
    "prefix": "@name",
    "body": [
      "@name ${1:text}$0"
    ],
    "description": "The name of the function or table definition. This is usually infered from the code analysis, and the programmer does not need to define it. If LuaDoc can infer the name of the function automatically it's even not recomended to define the name explicitly, to avoid redundancy."
  }
}
