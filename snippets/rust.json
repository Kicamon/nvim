{
  "allow": {
    "prefix": "allow",
    "body": ["#![allow(${1})]"],
    "description": "#![allow(…)]"
  },
  "deny": {
    "prefix": "deny",
    "body": ["#![deny(${1})]"],
    "description": "#![deny(…)]"
  },
  "warn": {
    "prefix": "warn",
    "body": ["#![warn(${1})]"],
    "description": "#![warn(…)]"
  },
  "no_std": {
    "prefix": "no_std",
    "body": ["#![no_std]"],
    "description": "#![no_std]"
  },
  "no_core": {
    "prefix": "no_core",
    "body": ["#![no_core]"],
    "description": "#![no_core]"
  },
  "feature": {
    "prefix": "feature",
    "body": ["#![feature(${1})]"],
    "description": "#![feature(…)]"
  },
  "macro_use": {
    "prefix": "macro_use",
    "body": ["#[macro_use(${1})]"],
    "description": "#[macro_use(…)]"
  },
  "repr": {
    "prefix": "repr",
    "body": ["#[repr(${1})]"],
    "description": "#[repr(…)]"
  },
  "cfg": {
    "prefix": "cfg",
    "body": ["#[cfg(${1})]"],
    "description": "#[cfg(…)]"
  },
  "cfg_attr": {
    "prefix": "cfg_attr",
    "body": ["#[cfg_attr(${1}, ${2})]"],
    "description": "#[cfg_attr(…, …)]"
  },
  "cfg!": {
    "prefix": "cfg!",
    "body": ["cfg!(${1})"],
    "description": "cfg!(…)"
  },
  "column": {
    "prefix": "column",
    "body": ["column!()"],
    "description": "column!()"
  },
  "concat": {
    "prefix": "concat",
    "body": ["concat!(${1})"],
    "description": "concat!(…)"
  },
  "concat_idents": {
    "prefix": "concat_idents",
    "body": ["concat_idents!(${1})"],
    "description": "concat_idents!(…)"
  },
  "debug_assert": {
    "prefix": "debug_assert",
    "body": ["debug_assert!(${1});"],
    "description": "debug_assert!(…)"
  },
  "debug_assert_eq": {
    "prefix": "debug_assert_eq",
    "body": ["debug_assert_eq!(${1}, ${2});"],
    "description": "debug_assert_eq!(…, …)"
  },
  "env": {
    "prefix": "env",
    "body": ["env!(\"${1}\")"],
    "description": "env!(\"…\")"
  },
  "file": {
    "prefix": "file",
    "body": ["file!()"],
    "description": "file!()"
  },
  "format": {
    "prefix": "format",
    "body": ["format!(\"${1}\")"],
    "description": "format!(…)"
  },
  "format_args": {
    "prefix": "format_args",
    "body": ["format_args!(\"${1}\")"],
    "description": "format_args!(…)"
  },
  "include": {
    "prefix": "include",
    "body": ["include!(\"${1}\");"],
    "description": "include!(\"…\");"
  },
  "include_bytes": {
    "prefix": "include_bytes",
    "body": ["include_bytes!(\"${1}\")"],
    "description": "include_bytes!(\"…\")"
  },
  "include_str": {
    "prefix": "include_str",
    "body": ["include_str!(\"${1}\")"],
    "description": "include_str!(\"…\")"
  },
  "line": {
    "prefix": "line",
    "body": ["line!()"],
    "description": "line!()"
  },
  "module_path": {
    "prefix": "module_path",
    "body": ["module_path!()"],
    "description": "module_path!()"
  },
  "option_env": {
    "prefix": "option_env",
    "body": ["option_env!(\"${1}\")"],
    "description": "option_env!(\"…\")"
  },
  "panic": {
    "prefix": "panic",
    "body": ["panic!(\"${1}\");"],
    "description": "panic!(…);"
  },
  "print": {
    "prefix": "print",
    "body": ["print!(\"${1}\");"],
    "description": "print!(…);"
  },
  "println": {
    "prefix": "println",
    "body": ["println!(\"${1}\");"],
    "description": "println!(…);"
  },
  "stringify": {
    "prefix": "stringify",
    "body": ["stringify!(${1})"],
    "description": "stringify!(…)"
  },
  "thread_local": {
    "prefix": "thread_local",
    "body": ["thread_local!(static ${1:STATIC}: ${2:Type} = ${4:init});"],
    "description": "thread_local!(static …: … = …);"
  },
  "try": {
    "prefix": "try",
    "body": ["try!(${1})"],
    "description": "try!(…)"
  },
  "unimplemented": {
    "prefix": "unimplemented",
    "body": ["unimplemented!()"],
    "description": "unimplemented!()"
  },
  "unreachable": {
    "prefix": "unreachable",
    "body": ["unreachable!(${1})"],
    "description": "unreachable!(…)"
  },
  "vec": {
    "prefix": "vec",
    "body": ["vec![${1}]"],
    "description": "vec![…]"
  },
  "write": {
    "prefix": "write",
    "body": ["write!(${1}, \"${2}\")"],
    "description": "write!(…)"
  },
  "writeln": {
    "prefix": "writeln",
    "body": ["writeln!(${1}, \"${2}\")"],
    "description": "writeln!(…, …)"
  },
  "assert": {
    "prefix": "assert",
    "body": ["assert!(${1});"],
    "description": "assert!(…);"
  },
  "assert_eq": {
    "prefix": "assert_eq",
    "body": ["assert_eq!(${1}, ${2});"],
    "description": "assert_eq!(…, …);"
  },
  "bench": {
    "prefix": "bench",
    "body": [
      "#[bench]",
      "fn ${1:name}(b: &mut test::Bencher) {",
      "    ${2:b.iter(|| ${3:/* benchmark code */})}",
      "}"
    ],
    "description": "#[bench]"
  },
  "const": {
    "prefix": "const",
    "body": ["const ${1:CONST}: ${2:Type} = ${4:init};"],
    "description": "const …: … = …;"
  },
  "derive": {
    "prefix": "derive",
    "body": ["#[derive(${1})]"],
    "description": "#[derive(…)]"
  },
  "enum": {
    "prefix": "enum",
    "body": [
      "#[derive(Debug)]",
      "enum ${1:Name} {",
      "    ${2:Variant1},",
      "    ${3:Variant2},",
      "}"
    ],
    "description": "enum … { … }"
  },
  "extern-crate": {
    "prefix": "extern-crate",
    "body": ["extern crate ${1:name};"],
    "description": "extern crate …;"
  },
  "extern-fn": {
    "prefix": "extern-fn",
    "body": [
      "extern \"C\" fn ${1:name}(${2:arg}: ${3:Type}) -> ${4:RetType} {",
      "    ${5:// add code here}",
      "}"
    ],
    "description": "extern \"C\" fn …(…) { … }"
  },
  "extern-mod": {
    "prefix": "extern-mod",
    "body": ["extern \"C\" {", "    ${2:// add code here}", "}"],
    "description": "extern \"C\" { … }"
  },
  "pfn": {
    "prefix": "pfn",
    "body": [
      "pub fn ${1:name}(${2:arg}: ${3:Type}) -> ${4:RetType} {",
      "    ${5:todo!();}",
      "}"
    ],
    "description": "pub fn …(…) { … }"
  },
  "fn": {
    "prefix": "fn",
    "body": [
      "fn ${1:name}(${2:arg}: ${3:Type}) -> ${4:RetType} {",
      "    ${5:todo!();}",
      "}"
    ],
    "description": "fn …(…) { … }"
  },
  "for": {
    "prefix": "for",
    "body": [
      "for ${1:pat} in ${2:expr} {",
      "    ${3:todo!();}",
      "}"
    ],
    "description": "for … in … { … }"
  },
  "if-let": {
    "prefix": "if-let",
    "body": [
      "if let ${1:Some(pat)} = ${2:expr} {",
      "    ${0:todo!();}",
      "}"
    ],
    "description": "if let … = … { … }"
  },
  "if": {
    "prefix": "if",
    "body": ["if ${1:condition} {", "    ${2:todo!();}", "}"],
    "description": "if … { … }"
  },
  "impl-trait": {
    "prefix": "impl-trait",
    "body": [
      "impl ${1:Trait} for ${2:Type} {",
      "    ${3:// add code here}",
      "}"
    ],
    "description": "impl … for … { … }"
  },
  "inline-fn": {
    "prefix": "inline-fn",
    "body": [
      "#[inline]",
      "pub fn ${1:name}() {",
      "    ${2:todo!();}",
      "}"
    ],
    "description": "inlined function"
  },
  "macro_rules": {
    "prefix": "macro_rules",
    "body": ["macro_rules! ${1:name} {", "    (${2}) => (${3})", "}"],
    "description": "macro_rules! … { … }"
  },
  "main": {
    "prefix": "main",
    "body": ["fn main() {", "    ${1:todo!();}", "}"],
    "description": "fn main() { … }"
  },
  "match": {
    "prefix": "match",
    "body": [
      "match ${1:expr} {}"
    ],
    "description": "match … { … }"
  },
  "mod-block": {
    "prefix": "mod-block",
    "body": ["mod ${1:name} {", "    ${2:// add code here}", "}"],
    "description": "mod … { … }"
  },
  "static": {
    "prefix": "static",
    "body": ["static ${1:STATIC}: ${2:Type} = ${4:init};"],
    "description": "static …: … = …;"
  },
  "struct-tuple": {
    "prefix": "struct-tuple",
    "body": ["struct ${1:Name}(${2:Type});"],
    "description": "struct …(…);"
  },
  "struct-unit": {
    "prefix": "struct-unit",
    "body": ["struct ${1:Name};"],
    "description": "struct …;"
  },
  "struct": {
    "prefix": "struct",
    "body": [
      "#[derive(Debug)]",
      "struct ${1:Name} {",
      "    ${2:field}: ${3:Type}",
      "}"
    ],
    "description": "struct … { … }"
  },
  "modtest": {
    "prefix": "modtest",
    "body": [
      "#[cfg(test)]",
      "mod test {",
      "    #[test]",
      "    fn ${1:name}() {",
      "        ${2:todo!();}",
      "    }",
      "}"
    ],
    "description": "#[cfg(test)]\nmod test {...}"
  },
  "test": {
    "prefix": "test",
    "body": [
      "#[test]",
      "fn ${1:name}() {",
      "    ${2:todo!();}",
      "}"
    ],
    "description": "#[test]"
  },
  "trait": {
    "prefix": "trait",
    "body": ["trait ${1:Name} {", "    ${2:// add code here}", "}", ""],
    "description": "trait … { … }"
  },
  "type": {
    "prefix": "type",
    "body": ["type ${1:Alias} = ${2:Type};"],
    "description": "type … = …;"
  },
  "while-let": {
    "prefix": "while-let",
    "body": [
      "while let ${1:Some(pat)} = ${2:expr} {",
      "    ${0:todo!();}",
      "}"
    ],
    "description": "while let … = … { … }"
  },
  "while": {
    "prefix": "while",
    "body": ["while ${1:condition} {", "    ${2:todo!();}", "}"],
    "description": "while … { … }"
  },
  "pafn": {
    "prefix": "pafn",
    "body": [
      "pub async fn ${1:name}(${2:arg}: ${3:Type}) -> ${4:RetType} {",
      "    ${5:todo!();}",
      "}"
    ],
    "description": "pub async fn …(…) { … }"
  },
  "afn": {
    "prefix": "afn",
    "body": [
      "async fn ${1:name}(${2:arg}: ${3:Type}) -> ${4:RetType} {",
      "    ${5:todo!();}",
      "}"
    ],
    "description": "async fn …(…) { … }"
  },
  "comment": {
    "prefix": "///",
    "body": [
      "/// ${1:Description.}$0",
      "///",
      "/// # Arguments",
      "///",
      "/// * ${3:`argument_name`} - ${4:type and description.}",
      "///",
      "/// # Returns",
      "/// ${2:type and description of the returned object.}",
      "///",
      "/// # Examples",
      "/// ```rust",
      "/// ${5:write me later}",
      "/// ```"
    ],
    "description": "A Rust comment with description, parameters, returns, and examples."
  },
  "crate": {
    "prefix": "//!",
    "body": [
      "//! ${1:Description.}$0",
      "//!",
      "//! # Examples",
      "//! ```rust",
      "//! ${2:write me later}",
      "//! ```"
    ],
    "description": "A special Rust comment to describe a crate, with description and examples."
  },
  "test": {
    "prefix": "///test",
    "body": [
      "/// ${1:Description.}$0",
      "///",
      "/// # Examples",
      "/// ```rust",
      "/// ${2:write me later}",
      "/// ```"
    ],
    "description": "A Rust comment to describe a test, with description and examples."
  },
  "html_favicon_url": {
    "prefix": "#![doc(html_favicon_url)]",
    "body": [
      "#![doc(html_favicon_url = \"${1:https://example.com/favicon.ico}$0\")]"
    ],
    "description": "This form of the doc attribute lets you control the favicon of your docs.\n\n* How to use: This style option must be added at the top of the src/lib.rs or main.rs file in your binary project."
  },
  "html_logo_url": {
    "prefix": "#![doc(html_logo_url)]",
    "body": [
      "#![doc(html_logo_url = \"${1:https://example.com/logo.jpg}$0\")]"
    ],
    "description": "This form of the doc attribute lets you control the logo in the upper left hand side of the docs.\n\n* How to use: This style option must be added at the top of the src/lib.rs or main.rs file in your binary project."
  },
  "html_playground_url": {
    "prefix": "#![doc(html_playground_url)]",
    "body": [
      "#![doc(html_playground_url = \"${1:https://playground.example.com/}$0\")]"
    ],
    "description": "This form of the doc attribute lets you control where the \"run\" buttons on your documentation examples make requests to.\n\n* How to use: This style option must be added at the top of the src/lib.rs or main.rs file in your binary project."
  },
  "issue_tracker_base_url": {
    "prefix": "#![doc(issue_tracker_base_url)]",
    "body": [
      "#![doc(issue_tracker_base_url = \"${1:https://github.com/rust-lang/rust/issues/}$0\")]"
    ],
    "description": "This form of the doc attribute is mostly only useful for the standard library; When a feature is unstable, an issue number for tracking the feature must be given. rustdoc uses this number, plus the base URL given here, to link to the tracking issue.\n\n* How to use: This style option must be added at the top of the src/lib.rs or main.rs file in your binary project."
  },
  "html_root_url": {
    "prefix": "#![doc(html_root_url)]",
    "body": [
      "#![doc(html_root_url = \"${1:https://docs.rs/serde/1.0}$0\")]"
    ],
    "description": "indicates the URL for generating links to external crates.\n\n* How to use: This style option must be added at the top of the src/lib.rs or main.rs file in your binary project."
  },
  "html_no_source": {
    "prefix": "#![doc(html_no_source)]",
    "body": [
      "#![doc(html_no_source)]$0"
    ],
    "description": "By default, rustdoc will include the source code of your program, with links to it in the docs. But if you include this, it will not.\n\n* How to use: This style option must be added at the top of the src/lib.rs or main.rs file in your binary project."
  },
  "test_no_crate_inject": {
    "prefix": "#![doc(test(no_crate_inject))]",
    "body": [
      "#![doc(test(no_crate_inject))]$0"
    ],
    "description": "By default, rustdoc will automatically add a line with extern crate my_crate; into each doctest.  But if you include this, it will not.\n\n* How to use: This style option must be added at the top of the src/lib.rs or main.rs file in your binary project."
  },
  "test_attr": {
    "prefix": "#![doc(test(attr(deny(warnings))))]",
    "body": [
      "#![doc(test(attr(deny(warnings))))]$0"
    ],
    "description": "This form of the doc attribute allows you to add arbitrary attributes to all your doctests. For example, if you want your doctests to fail if they produce any warnings, you could add this.\n\n* How to use: This style option must be added at the top of the src/lib.rs or main.rs file in your binary project."
  },
  "inline": {
    "prefix": "#[doc(inline)]",
    "body": [
      "#[doc(inline)]$0"
    ],
    "description": "These attribute is used on use statements, and control where the documentation shows up.\n\n* How to use: You can use this on use statements. For example:\n`pub use bar::Bar;`"
  },
  "no_inline": {
    "prefix": "#[doc(no_inline)]",
    "body": [
      "#[doc(no_inline)]$0"
    ],
    "description": "These attribute is used on use statements, and control where the documentation shows up.\n\n* How to use: You can use this on use statements. For example:\n`pub use bar::Bar;`"
  },
  "hidden": {
    "prefix": "#[doc(hidden)]",
    "body": [
      "#[doc(hidden)]$0"
    ],
    "description": "Any item annotated with #[doc(hidden)] will not appear in the documentation, unless the strip-hidden pass is removed.\n\n* How to use: You can use this on any item."
  },
  "alias": {
    "prefix": "#[doc(alias)]",
    "body": [
      "#[doc(alias = \"${1:name}$0\")]"
    ],
    "description": "This feature allows you to add alias(es) to an item when using the rustdoc search through the doc(alias) attribute.\n\n* How to use: You can use this on any item."
  },
  "broken_intra_doc_links": {
    "prefix": "#![warn(rustdoc::broken_intra_doc_links)]",
    "body": [
      "#![${1:warn}$0(rustdoc::broken_intra_doc_links)]"
    ],
    "description": "How to report broken links when generating the documentation.\n\n* Accepted vales: allow, warn, deny.\n\n* Default: warn\n\n* How to use: This lint option must be added at the top of the src/lib.rs or main.rs file in your binary project."
  },
  "private_intra_doc_links": {
    "prefix": "#![warn(rustdoc::private_intra_doc_links)]",
    "body": [
      "#![${1:warn}$0(rustdoc::private_intra_doc_links)]"
    ],
    "description": "How to report when a public item is documented as private by mistake, or vice-versa, when generating the documentation.\n\n* Accepted vales: allow, warn, deny.\n\n* Default: warn\n\n* How to use: This lint option must be added at the top of the src/lib.rs or main.rs file in your binary project."
  },
  "missing_docs": {
    "prefix": "#![warn(missing_docs)]",
    "body": [
      "#![${1:warn}$0(missing_docs)]"
    ],
    "description": "How to report when an item is missing comments, when generating the documentation.\n\n* Accepted vales: allow, warn, deny.\n\n* Default: allow\n\n* How to use: This lint option must be added at the top of the src/lib.rs or main.rs file in your binary project."
  },
  "missing_crate_level_docs": {
    "prefix": "#![warn(rustdoc::missing_crate_level_docs)]",
    "body": [
      "#![${1:warn}$0(rustdoc::missing_crate_level_docs)]"
    ],
    "description": "How to report when a crate is missing comments, when generating the documentation.\n\n* Accepted vales: allow, warn, deny.\n\n* Default: allow\n\n* How to use: This lint option must be added at the top of the src/lib.rs or main.rs file in your binary project."
  },
  "missing_doc_code_examples": {
    "prefix": "#![warn(rustdoc::missing_doc_code_examples)]",
    "body": [
      "#![${1:warn}$0(rustdoc::missing_doc_code_examples)]"
    ],
    "description": "How to report when a crate is missing examples, when generating the documentation.\n\n* Accepted vales: allow, warn, deny.\n\n* Default: allow\n\n* How to use: This lint option must be added at the top of the src/lib.rs or main.rs file in your binary project."
  },
  "private_doc_tests": {
    "prefix": "#![warn(rustdoc::private_doc_tests)]",
    "body": [
      "#![${1:warn}$0(rustdoc::private_doc_tests)]"
    ],
    "description": "How to report documentation tests when they are on a private item, when generating the documentation.\n\n* Accepted vales: allow, warn, deny.\n\n* Default: allow\n\n* How to use: This lint option must be added at the top of the src/lib.rs or main.rs file in your binary project."
  },
  "invalid_codeblock_attributes": {
    "prefix": "#![warn(rustdoc::invalid_codeblock_attributes)]",
    "body": [
      "#![${1:warn}$0(rustdoc::invalid_codeblock_attributes)]"
    ],
    "description": "How to report code block attributes in examples that have potentially mis-typed values, when generating the documentation.\n\n* Accepted vales: allow, warn, deny.\n\n* Default: warn\n\n* How to use: This lint option must be added at the top of the src/lib.rs or main.rs file in your binary project."
  },
  "invalid_html_tags": {
    "prefix": "#![warn(rustdoc::invalid_html_tags)]",
    "body": [
      "#![${1:warn}$0(rustdoc::invalid_html_tags)]"
    ],
    "description": "How to report unclosed or invalid HTML tags, when generating the documentation.\n\n* Accepted vales: allow, warn, deny.\n\n* Default: warn\n\n* How to use: This lint option must be added at the top of the src/lib.rs or main.rs file in your binary project."
  },
  "invalid_rust_codeblocks": {
    "prefix": "#![warn(rustdoc::invalid_rust_codeblocks)]",
    "body": [
      "#![${1:warn}$0(rustdoc::invalid_rust_codeblocks)]"
    ],
    "description": "How to report code blocks in examples that are invalid, when generating the documentation.\n\n* Accepted vales: allow, warn, deny.\n\n* Default: warn\n\n* How to use: This lint option must be added at the top of the src/lib.rs or main.rs file in your binary project."
  },
  "bare_urls": {
    "prefix": "#![warn(rustdoc::bare_urls)]",
    "body": [
      "#![${1:warn}$0(rustdoc::bare_urls)]"
    ],
    "description": "How to report URLs which are not links, when generating the documentation.\n\n* Accepted vales: allow, warn, deny.\n\n* Default: warn\n\n* How to use: This lint option must be added at the top of the src/lib.rs or main.rs file in your binary project."
  },
  "cfg": {
    "prefix": "#[cfg()]",
    "body": [
      "#[cfg(any(${1:unix}$0, doc))"
    ],
    "description": "Documents the item can only be used on Unix.\n\n* Accepted vales: unix, windows\n\n* How to use: This style option must be added at the top of the src/lib.rs or main.rs file in your binary project."
  }
}
